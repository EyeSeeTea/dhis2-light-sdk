apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

configurations {
    ktlint
}

kotlin {

    def ktor_version = "1.0.0"
    def serialization_version = "0.9.0"

    targets {
        fromPreset(presets.jvm, 'android')

        fromPreset(presets.js, 'js') {
            compilations.main {
                compileKotlinJs.kotlinOptions {
                    languageVersion = "1.3"
                    sourceMap = true
                    metaInfo = true
                    sourceMapEmbedSources = "always"
                    moduleKind = "commonjs"
                    //moduleKind= "amd" "commonjs" "umd"
                }
                compileTestKotlinJs.kotlinOptions {
                    languageVersion = "1.3"
                    moduleKind = "commonjs"
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'

                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-mock:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        androidMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-okhttp:$ktor_version"
            }
        }
        androidTest {
            dependencies {
                implementation 'junit:junit:4.12'
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                implementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
            }
        }
        jsMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'

                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
                implementation "io.ktor:ktor-client-js:$ktor_version"
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
                implementation "io.ktor:ktor-client-mock-js:$ktor_version"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }
    }
}

dependencies {
    ktlint 'com.github.shyiko:ktlint:0.29.0'
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "passed", "failed"
        showStandardStreams true
    }
}

def jsCompilations = kotlin.targets.js.compilations

apply plugin: 'com.moowork.node'

node {
    download = true
}

task populateNodeModulesForWebSample(dependsOn: [jsJar]) {
    doLast {
        copy {
            from jsCompilations.main.output.allOutputs
            from kotlin.sourceSets.jsMain.resources.srcDirs
            jsCompilations.main.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into "${buildDir}/../../webSample/node_modules"
        }
    }
}


task installBrowserify(type: NpmTask) {
    args = ['install', 'browserify']
}

////TODO: This is a direct dependency of kotlinx.io.js - Review!!
task installTextEncoding(type: NpmTask) {
    workingDir = file("${buildDir}/../../webSample/node_modules")
    args = ['install', 'text-encoding']
}

task buildJsToWeb(type: NodeTask, dependsOn: [populateNodeModulesForWebSample, installBrowserify, installTextEncoding]) {
    script = file("node_modules/browserify/bin/cmd")
    args = ["../webSample/js/sample.js", "-o", "../webSample/js/bundle.js"]
}

assemble.dependsOn buildJsToWeb

//JS Test configuration with Jest
//task populateNodeModulesForTest {
//    doLast {
//        copy {
//            from jsCompilations.main.output
//            from jsCompilations.test.output
//            jsCompilations.test.runtimeDependencyFiles.each {
//                if (it.exists() && !it.isDirectory()) {
//                    from zipTree(it.absolutePath).matching { include '*.js' }
//                }
//            }
//            into "${buildDir}/../node_modules"
//        }
//    }
//}
//
//task installMocha(type: NpmTask) {
//    args = ['install', 'mocha']
//}
//
////TODO: This is a direct dependency of kotlinx.io.js - Review!!
//task installTextEncoding(type: NpmTask) {
//    args = ['install', 'text-encoding']
//}
//
//task runMocha(type: NodeTask, dependsOn: [jsJar, populateNodeModulesForTest, installMocha, installTextEncoding]) {
//    script = file("node_modules/mocha/bin/mocha")
//    args = ["node_modules/library_test.js"]
//}
//
//jsTest.dependsOn runMocha
//
//// Fix for https://github.com/srs/gradle-node-plugin/issues/301
//repositories.whenObjectAdded {
//    if (it instanceof IvyArtifactRepository) {
//        metadataSources {
//            artifact()
//        }
//    }
//}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}
